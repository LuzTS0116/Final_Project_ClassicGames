{"version":3,"sources":["script-tictactoe.js"],"names":["window","addEventListener","innerHTML","announcer","playerDisplay","classList","remove","concat","currentPlayer","innerText","add","announce","type","PLAYERO_WON","PLAYERX_WON","handleResultValidation","roundWon","winCondition","winningConditions","tiles","Array","from","document","querySelectorAll","querySelector","board","isValidAction","tile","updateBoard","index","isGameActive","changePlayer","i","a","b","c","forEach","userAction","resetButton"],"mappings":"aACAA,OAAOC,iBAAiB,mBAAoB,WA+ClBC,SAAVC,IACAC,EAAAC,UAAAC,OAAA,SAAAC,OAAAC,IATRA,EAAkC,MAAlBA,EAAwB,IAAM,IAU3CJ,EAAAK,UAAAD,EACKL,EAAUD,UAAYQ,IAAtBP,SAAAA,OAAsBK,IAE3B,SAAAG,EAAAC,GACKT,OAAAA,GARR,KAAAU,EAEQV,EAAUD,UAAY,4CAQpBG,MAXd,KAAAS,EAMYX,EAAUD,UAAY,4CAQzBa,MACDC,IA/CI,MAyCAb,EAAUM,UAAY,MAQ5BN,EAAMc,UAAeC,OAAAA,QA9D/B,IAAAC,EAAAC,MAAAC,KAAAC,SAAAC,iBAAA,UACOtB,EAAiBqB,SAAAE,cAAoB,mBAClCL,EAAQG,SAAmBE,cAACD,UAC5BnB,EAAgBkB,SAASE,cAAc,cAEvCrB,EAAS,CAAA,GAAGmB,GAAAA,GAASE,GAAAA,GAAAA,GAAc,GAAA,GAAA,IAErCC,EAAiB,IACjBjB,GAAgB,EAGdM,EAAc,cACdD,EAAc,cAGdK,EAAoB,CAWpBQ,CAAAA,EAAAA,EAAAA,GACEC,CAAAA,EAAI,EAAClB,GACL,CAAA,EAAA,EAAO,GACV,CAAA,EAAA,EAAA,GATD,CAAC,EAAG,EAAG,GAWP,CAAA,EAAO,EAAP,GALJ,CAAA,EAAA,EAAA,GAHI,CAAC,EAAG,EAAG,IAiEL,SAAAmB,EAAAD,EAAAE,IAtDN,SAAAF,GAPI,MAAuB,MAAnBA,EAAKlB,WAAwC,MAAnBkB,EAAKlB,WA8DjCM,CAAAA,IAAsBe,IACtBC,EAAAA,UAAYvB,EACbmB,EAAAtB,UAAAK,IAAA,SAAAH,OAAAC,IAzDgB,SAACqB,GAWhBlB,EAAQkB,GAAGrB,EAuCfoB,CAAAC,GAnBI,WACA,IANF,IAAIb,GAAW,EAMHgB,EAAN,EAAaA,GAAK,EAAlBA,IAAyB,CAC3B,IAAAf,EAAAC,EAAAc,GACDC,EAAAR,EAAAR,EAAA,IAJKiB,EAAIT,EAAMR,EAAa,IAKnBiB,EAANT,EAAYR,EAAQ,IACtBD,GAAW,KAAXA,GAAA,KAAAkB,GAAA,KAAAC,IAGHF,IAAAC,GAAAA,IAAAC,GAAA,CAHGnB,GAAW,EAKXA,OAIH,GAAAA,EAGF,OANGL,EAA2B,MAAlBH,EAAwBM,EAAcD,GAK5CY,GAAe,EAIhBC,EAAAA,SAAA,KAAuBI,EAxEnB,OA4ENf,GAKAqB,KAANjB,EAAAiB,QAAA,SAAAT,EAAAE,GACIF,EAAK1B,iBAAiB,QAAS,WAAA,OAAMoC,EAAWV,EAAME,OAmB1DS,EAAYrC,iBAAiB,QAdzB,WACAE,EAAUE,CAAAA,GAAAA,GAAUK,GAAI,GAAA,GAAxB,GAAA,GAAA,GAAA,IADAoB,GAAe,EAGXtB,EAAAA,UAAkBE,IAAK,QAE1B,MAAAF,GADGuB,IAKAJ,EAAKtB,QAAUC,SAAAA,GACVD,EAAAA,UAAiB,GAH1BsB,EAAAtB,UAAAC,OAAA,WATJqB,EAAAtB,UAAAC,OAAA","file":"script-tictactoe.min.js","sourcesContent":["//TIC TAC TOE GAME//\r\nwindow.addEventListener('DOMContentLoaded', () => {\r\n    const tiles = Array.from(document.querySelectorAll('.tile'));\r\n    const playerDisplay = document.querySelector('.display-player');\r\n    const resetButton = document.querySelector('#reset');\r\n    const announcer = document.querySelector('.announcer');\r\n\r\n    let board = ['', '', '', '', '', '', '', '', ''];\r\n    let currentPlayer = 'X';\r\n    let isGameActive = true;\r\n\r\n    const PLAYERX_WON = 'PLAYERX_WON';\r\n    const PLAYERO_WON = 'PLAYERO_WON';\r\n    const TIE = 'TIE';\r\n\r\n    const winningConditions = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n     ];\r\n\r\n    const isValidAction = (tile) => {\r\n        if (tile.innerText === 'X' || tile.innerText === 'O'){\r\n            return false;\r\n        }\r\n    \r\n        return true;\r\n    };\r\n\r\n    const updateBoard =  (index) => {\r\n        board[index] = currentPlayer;\r\n    }\r\n\r\n    const changePlayer = () => {\r\n        playerDisplay.classList.remove(`player${currentPlayer}`);\r\n        currentPlayer = currentPlayer === 'X' ? 'O' : 'X';\r\n        playerDisplay.innerText = currentPlayer;\r\n        playerDisplay.classList.add(`player${currentPlayer}`);\r\n    }\r\n\r\n    const announce = (type) => {\r\n        switch(type){\r\n           case PLAYERO_WON:\r\n                announcer.innerHTML = 'Player <span class=\"playerO\">O</span> Won';\r\n                break;\r\n           case PLAYERX_WON:\r\n                announcer.innerHTML = 'Player <span class=\"playerX\">X</span> Won';\r\n                break;\r\n           case TIE:\r\n                announcer.innerText = 'Tie';\r\n            }\r\n        announcer.classList.remove('hide');\r\n    };\r\n\r\n    function handleResultValidation() {\r\n        let roundWon = false;\r\n        for (let i = 0; i <= 7; i++) {\r\n          const winCondition = winningConditions[i];\r\n          const a = board[winCondition[0]];\r\n          const b = board[winCondition[1]];\r\n          const c = board[winCondition[2]];\r\n          if (a === \"\" || b === \"\" || c === \"\") {\r\n            continue;\r\n          }\r\n          if (a === b && b === c) {\r\n            roundWon = true;\r\n            break;\r\n          }\r\n        }\r\n      \r\n        if (roundWon) {\r\n          announce(currentPlayer === \"X\" ? PLAYERX_WON : PLAYERO_WON);\r\n          isGameActive = false;\r\n          return;\r\n        }\r\n      \r\n        if (!board.includes(\"\")) announce(TIE);\r\n      }\r\n\r\n      const userAction = (tile, index) => {\r\n        if (isValidAction(tile) && isGameActive) {\r\n          tile.innerText = currentPlayer;\r\n          tile.classList.add(`player${currentPlayer}`);\r\n          updateBoard(index);\r\n          handleResultValidation();\r\n          changePlayer();\r\n        }\r\n      };\r\n\r\n    tiles.forEach( (tile, index) => {\r\n        tile.addEventListener('click', () => userAction(tile, index));\r\n    });\r\n\r\n    const resetBoard = () => {\r\n        board = ['', '', '', '', '', '', '', '', ''];\r\n        isGameActive = true;\r\n        announcer.classList.add('hide');\r\n    \r\n        if (currentPlayer === 'O') {\r\n            changePlayer();\r\n        }\r\n    \r\n        tiles.forEach(tile => {\r\n            tile.innerText = '';\r\n            tile.classList.remove('playerX');\r\n            tile.classList.remove('playerO');\r\n        });\r\n    }\r\n\r\n    resetButton.addEventListener('click', resetBoard);\r\n\r\n  });"]}